import click
import time
import random
from functools import wraps
from typing import List


class Pizza:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–∏—Ü—Ü.

    Attributes:
        size (str): –†–∞–∑–º–µ—Ä –ø–∏—Ü—Ü—ã
        ingredients (List[str]): –ò–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã –≤ –ø–∏—Ü—Ü–µ
    """

    def __init__(self, size: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∏—Ü—Ü—É

        Args:
            size (str): –†–∞–∑–º–µ—Ä –ø–∏—Ü—Ü—ã
        """

        self.ingredients: List[str] = []
        self.size: str = size

    def dict(self) -> dict:
        """–ë—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ—Ü–µ–ø—Ç–æ–º –ø–∏—Ü—Ü—ã"""
        return {'ingredients': self.ingredients, 'size': self.size}

    def __eq__(self, other: 'Pizza') -> bool:
        """–§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–≤—É—Ö –ø–∏—Ü—Ü

        Args:
            other (Pizza): –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ Pizza, —Å –∫–æ—Ç–æ—Ä—ã–º –±—É–¥—É —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å

        Returns:
            bool: –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ª–∏ –ø–∏—Ü—Ü—ã –∏–ª–∏ –Ω–µ—Ç
        """
        return (self.ingredients == other.ingredients
                and self.size == other.size)

    def get_name(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∏—Ü—Ü—ã

        Returns:
            str: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∏—Ü—Ü—ã
        """
        return 'Pizza'


class Margherita(Pizza):
    """–ö–ª–∞—Å—Å –¥–ª—è –º–∞—Ä–≥–∞—Ä–∏—Ç—ã.

    Attributes:
        size (str): –†–∞–∑–º–µ—Ä –ø–∏—Ü—Ü—ã.
        ingredients (List[str]): –°–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –º–∞—Ä–≥–∞—Ä–∏—Ç—ã
    """

    def __init__(self, size: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä–≥–∞—Ä–∏—Ç—ã

        Args:
            size (str): –†–∞–∑–º–µ—Ä –ø–∏—Ü—Ü—ã
        """

        super().__init__(size)

        self.ingredients.extend(
            ['üçÖ ü•´ tomato sauce', 'üßÄ mozzarella', 'üçÖ tomatoes'])

    def get_name(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–≥–∞—Ä–∏—Ç—ã

        Returns:
            str: –Ω–∞–∑–≤–∞–Ω–∏–µ
        """
        return 'Margherita'


class Pepperoni(Pizza):
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–µ–ø–ø–µ—Ä–æ–Ω–∏

    Attributes:
        size (str): –†–∞–∑–º–µ—Ä –ø–∏—Ü—Ü—ã
        ingredients (List[str]): –°–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –ø–µ–ø–ø–µ—Ä–æ–Ω–∏
    """

    def __init__(self, size: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ–ø–ø–µ—Ä–æ–Ω–∏

        Args:
            size (str): –†–∞–∑–º–µ—Ä –ø–∏—Ü—Ü—ã
        """
        super().__init__(size)
        self.ingredients.extend(
            ['üçÖ ü•´ tomato sauce', 'üßÄ mozzarella', 'üå∂Ô∏è üòã pepperoni'])

    def get_name(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ–ø–ø–µ—Ä–æ–Ω–∏

        Returns:
            str: –Ω–∞–∑–≤–∞–Ω–∏–µ
        """
        return 'Pepperoni'


class Hawaiian(Pizza):
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–∞–≤–∞–π—Å–∫–æ–π

    Attributes:
        size (str): –†–∞–∑–º–µ—Ä –ø–∏—Ü—Ü—ã
        ingredients (List[str]): –°–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –≥–∞–≤–∞–π—Å–∫–æ–π
    """

    def __init__(self, size: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–∞–≤–∞–π—Å–∫–æ–π

        Args:
            size (str): –†–∞–∑–º–µ—Ä –ø–∏—Ü—Ü—ã
        """
        super().__init__(size)
        self.ingredients.extend(
            ['üçÖ ü•´ tomato sauce', 'üßÄ mozzarella', 'üçó chicken', 'üçç pineapples'])

    def get_name(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ–ø–ø–µ—Ä–æ–Ω–∏

        Returns:
            str: –Ω–∞–∑–≤–∞–Ω–∏–µ
        """
        return 'Hawaiian'


def print_delivery_status(obj: Pizza, action: str, duration: int) -> None:
    """–í—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–∏—Ü—Ü—ã

    Args:
        obj (Pizza): –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ Pizza
        action (str): —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏, –î–æ—Å—Ç–∞–≤–∏–ª–∏, –ó–∞–±—Ä–∞–ª–∏)
        duration (int): –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    print(f'{action} {obj.get_name()} –∑–∞ {duration}s!')


@click.group()
def cli() -> None:
    """–∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º –ø–∏—Ü—Ü"""
    pass


@cli.command()
@click.option('--delivery', default=False, is_flag=True,
              help='–í—ã–±—Ä–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É')
@click.option('--pickup', default=False, is_flag=True,
              help='–í—ã–±—Ä–∞—Ç—å —Å–∞–º–æ–≤—ã–≤–æ–∑')
@click.argument('pizza', nargs=1)
@click.argument('size', type=click.Choice(['X', 'XL']))
def order(pizza: str, size: str, delivery: bool, pickup: bool) -> None:
    """–ì–æ—Ç–æ–≤–∏—Ç –∏ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É / –≥–æ—Ç–æ–≤–∏—Ç –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–∞–º–æ–≤–æ–≤–æ–∑ –ø–∏—Ü—Ü—ã
    / –≥–æ—Ç–æ–≤–∏—Ç –ø–∏—Ü—Ü—É

    Args:
        pizza (str): –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∏—Ü—Ü—ã
        size (str): —Ä–∞–∑–º–µ—Ä –ø–∏—Ü—Ü—ã
        delivery (bool): —Ñ–ª–∞–≥ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
        pickup (bool): —Ñ–ª–∞–≥ –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞
    """
    obj = None
    if pizza.lower() == 'margherita':
        obj = Margherita(size)
    elif pizza.lower() == 'pepperoni':
        obj = Pepperoni(size)
    elif pizza.lower() == 'hawaiian':
        obj = Hawaiian(size)

    cook_time = random.randint(1, 3)
    wait_time = random.randint(1, 3)
    delivery_time = random.randint(1, 3)

    if delivery and pickup:
        print('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –∏ —Å–∞–º–æ–≤—ã–≤–æ–∑ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞!')
    elif delivery:
        time.sleep(cook_time)
        print_delivery_status(obj, '–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏', cook_time)
        time.sleep(delivery_time)
        print_delivery_status(obj, '–î–æ—Å—Ç–∞–≤–∏–ª–∏', delivery_time)
    elif pickup:
        time.sleep(cook_time)
        print_delivery_status(obj, '–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏', cook_time)
        time.sleep(wait_time)
        print_delivery_status(obj, '–ó–∞–±—Ä–∞–ª–∏', wait_time)
    else:
        time.sleep(cook_time)
        print_delivery_status(obj, '–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏', cook_time)


@cli.command()
def menu() -> None:
    """–í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é"""
    margherita = Margherita(size='X')
    pepperoni = Pepperoni(size='X')
    hawaiian = Hawaiian(size='X')

    print('üßÄ Margherita :', ', '.join(margherita.ingredients))
    print('ü•µ Pepperoni  :', ', '.join(pepperoni.ingredients))
    print('üèùÔ∏è Hawaiian   :', ', '.join(hawaiian.ingredients))


def log(template: str) -> wraps:
    """–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π —Å –ø–∏—Ü—Ü–∞–º–∏

    Args:
        template (str): —à–∞–±–ª–æ–Ω –≤—ã–≤–æ–¥–∞

    Returns:
        wraps: —Ñ—É–Ω–∫—Ü–∏—è, –æ–±–µ—Ä–Ω—É—Ç–∞—è –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
    """
    def decorator(func: callable) -> wraps:
        @wraps(func)
        def wrapper(*args, **kwargs):
            start_time = time.time()
            result = func(*args, **kwargs)
            end_time = time.time()
            duration = round(end_time - start_time)
            print(template.format(duration))
            return result
        return wrapper
    return decorator


@log('üë®‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∑–∞ {}—Å!')
def bake(pizza: Pizza) -> None:
    """–ì–æ—Ç–æ–≤–∏—Ç –ø–∏—Ü—Ü—É

    Args:
        pizza (Pizza): –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ Pizza
    """
    time.sleep(random.randint(1, 3))


@log('üõµ –î–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞ {}—Å!')
def delivery(pizza: Pizza) -> None:
    """–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É

    Args:
        pizza (Pizza): –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ Pizza
    """
    time.sleep(random.randint(1, 3))


@log('üèéÔ∏è –ó–∞–±—Ä–∞–ª–∏ –∑–∞ {}—Å!')
def pickup(pizza: Pizza) -> None:
    """–°–∞–º–æ–≤—ã–≤–æ–∑ –ø–∏—Ü—Ü—ã

    Args:
        pizza (Pizza): –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ Pizza
    """
    time.sleep(random.randint(1, 3))


if __name__ == '__main__':  # pragma: no cover
    cli()
